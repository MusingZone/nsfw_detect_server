#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class RequestType(object):
    NSFW_DETECT = 0
    DETECT_DEBUG = 1

    _VALUES_TO_NAMES = {
        0: "NSFW_DETECT",
        1: "DETECT_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "NSFW_DETECT": 0,
        "DETECT_DEBUG": 1,
    }


class FileType(object):
    VIDEO = 0
    IMAGE = 1
    AUDIO = 2
    TEXT = 3

    _VALUES_TO_NAMES = {
        0: "VIDEO",
        1: "IMAGE",
        2: "AUDIO",
        3: "TEXT",
    }

    _NAMES_TO_VALUES = {
        "VIDEO": 0,
        "IMAGE": 1,
        "AUDIO": 2,
        "TEXT": 3,
    }


class ResponseStatus(object):
    DETECT_OK = 0
    ERROR_1 = 1

    _VALUES_TO_NAMES = {
        0: "DETECT_OK",
        1: "ERROR_1",
    }

    _NAMES_TO_VALUES = {
        "DETECT_OK": 0,
        "ERROR_1": 1,
    }


class Request(object):
    """
    Attributes:
     - req_type
     - file_type
     - file_urls
     - detect_params

    """


    def __init__(self, req_type=None, file_type=None, file_urls=None, detect_params=None,):
        self.req_type = req_type
        self.file_type = file_type
        self.file_urls = file_urls
        self.detect_params = detect_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.req_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.file_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.file_urls = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.file_urls.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.detect_params = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.detect_params[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Request')
        if self.req_type is not None:
            oprot.writeFieldBegin('req_type', TType.I32, 1)
            oprot.writeI32(self.req_type)
            oprot.writeFieldEnd()
        if self.file_type is not None:
            oprot.writeFieldBegin('file_type', TType.I32, 2)
            oprot.writeI32(self.file_type)
            oprot.writeFieldEnd()
        if self.file_urls is not None:
            oprot.writeFieldBegin('file_urls', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.file_urls))
            for iter13 in self.file_urls:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.detect_params is not None:
            oprot.writeFieldBegin('detect_params', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.detect_params))
            for kiter14, viter15 in self.detect_params.items():
                oprot.writeString(kiter14.encode('utf-8') if sys.version_info[0] == 2 else kiter14)
                oprot.writeString(viter15.encode('utf-8') if sys.version_info[0] == 2 else viter15)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.req_type is None:
            raise TProtocolException(message='Required field req_type is unset!')
        if self.file_type is None:
            raise TProtocolException(message='Required field file_type is unset!')
        if self.file_urls is None:
            raise TProtocolException(message='Required field file_urls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResponseInfo(object):
    """
    Attributes:
     - detect_result
     - debug_info

    """


    def __init__(self, detect_result=None, debug_info=None,):
        self.detect_result = detect_result
        self.debug_info = debug_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.detect_result = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readDouble()
                        self.detect_result.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.debug_info = []
                    (_etype25, _size22) = iprot.readListBegin()
                    for _i26 in range(_size22):
                        _elem27 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.debug_info.append(_elem27)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResponseInfo')
        if self.detect_result is not None:
            oprot.writeFieldBegin('detect_result', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.detect_result))
            for iter28 in self.detect_result:
                oprot.writeDouble(iter28)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.debug_info is not None:
            oprot.writeFieldBegin('debug_info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.debug_info))
            for iter29 in self.debug_info:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.detect_result is None:
            raise TProtocolException(message='Required field detect_result is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchResult(object):
    """
    Attributes:
     - resp_status
     - resp_info

    """


    def __init__(self, resp_status=None, resp_info=None,):
        self.resp_status = resp_status
        self.resp_info = resp_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.resp_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.resp_info = ResponseInfo()
                    self.resp_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SearchResult')
        if self.resp_status is not None:
            oprot.writeFieldBegin('resp_status', TType.I32, 1)
            oprot.writeI32(self.resp_status)
            oprot.writeFieldEnd()
        if self.resp_info is not None:
            oprot.writeFieldBegin('resp_info', TType.STRUCT, 2)
            self.resp_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.resp_status is None:
            raise TProtocolException(message='Required field resp_status is unset!')
        if self.resp_info is None:
            raise TProtocolException(message='Required field resp_info is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestException(TException):
    """
    Attributes:
     - code
     - excp

    """


    def __init__(self, code=None, excp=None,):
        super(RequestException, self).__setattr__('code', code)
        super(RequestException, self).__setattr__('excp', excp)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, self.excp, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        excp = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    excp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
            excp=excp,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RequestException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRING, 2)
            oprot.writeString(self.excp.encode('utf-8') if sys.version_info[0] == 2 else self.excp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Request)
Request.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'req_type', None, None, ),  # 1
    (2, TType.I32, 'file_type', None, None, ),  # 2
    (3, TType.LIST, 'file_urls', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.MAP, 'detect_params', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(ResponseInfo)
ResponseInfo.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'detect_result', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'debug_info', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(SearchResult)
SearchResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'resp_status', None, None, ),  # 1
    (2, TType.STRUCT, 'resp_info', [ResponseInfo, None], None, ),  # 2
)
all_structs.append(RequestException)
RequestException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'excp', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
